package ch13.d;
// 인스턴스를 만들때는 수퍼클래스의 인스턴스까지 생성한다.
public class Test01 {

  public static void main(String[] args) {
    B obj = new B();
    // B클래스 인스턴스 생성과정
    // 1) B의 수퍼클래스(A클래스)를 로딩한다.(로딩되어 있지 않다면)
    //      - 스태틱 필드 생성 -> 스태틱 블록 실행
    // 2) B 클래스 로딩(로딩되어 있지 않다면)
    //      - 스태틱 필드 생성 -> 스태틱 블록 실행
    // 3) 인스턴스 필드 생성
    //      - 수퍼 클래스의  인스턴스필드부터 생성한다.
    //  v1  |   v2   : A의 v1 필드 생성 => B의 v2필드 생성
    //    0    |    0     : 각필드의 기본값으로 설정
    //   100   |    0     : A 클래스의 초기화 문장 수행
    //      100 |   200  : B클래스의 초기화 문장 수행
    // B클래스의 인스턴스는 수퍼 클래스의 인스턴스 필드도 포함한다.
    
    // A클래스의 m1()을 호출하면서 B인스턴스의 주소를 넘겨준다.
    // 메서드 호출과정
   // B 클래스에서 m1() 찾는다 =>없으면 A 클래스에서 m1()을 찾는다.
    // 메서드를 호출할 때마다 수퍼 클래스를 따라 올라가면서 찾기 때문에
    // 그래서 객체지향 프로그래밍이 c와 같은 언어보다 속도가 느리다고 하는 것이다.
    obj.m1(); 
    obj.m2(); // B클래스에서 m2()를 찾는다.

  }

}
