package ch30.b;

import org.springframework.stereotype.Component;

@Component
public class X {
  public void m1() {
    // m1() 메서드를 실행하기 전에 기능을 추가하기
    // : 다음과 같이 직접 해당 기능을 수행하는 코드를 삽입해야 한다.
    MyAdvice myAdvice = new MyAdvice();
    myAdvice.advice1();
    
    // 이렇게 어떤 메서드를 실행하기 전이나 후에 기능을 추가하고 싶다면
    // 해당 메서드를 찾아가서 코드를 편집해야 한다.
    //
    // 이 고전적인 방식의 문제점?
    // 1) 원래 코드에 손을 대야 하기때문에 유지보수에 좋지 않다.
    //    변경하면 또 기존 코드를 손대야 한다.
    // 2) 추가하는 클래스와 관계를 맺기 때문에 종속이 발생한다.
    // 3) 유사한 일을 하는 메서드들에 같은 기능을 삽입할 때 여러 곳을 편집해야 하기 때문에 유지보수가 힘들다.
    //    예를 들어 insert 작업을 수행하기 전에 시간을 측정해서 출력하고 insert를 수행하게 한다면,
    //  insert 작업을 수행하는 객체 boardDao, lessonDao... 등 객체들 모두를 수정해야 한다.
    // 4) 추가한 기능을 걷어 낼 때도 매우 번거롭다.
    //    만약 CRUD 기능을 수행할 때마다 시간을 측정하는 것을 추가하려한다면, 
    //    모든 객체에 이 시간 측정 기능을 일일이 삽입해줘야한다.
    //    또한 이 시간 측정 기능을 다 지워야 한다면 모든 객체에서 이 시간 측정 기능을 일일이 뻬줘야한다.
    //    너무 힘들다. 
    //    그래서 이런 힘든 유지보수를 더 쉽게 하기 위해서 등장한 기술이 'AOP'이다.
    //
    // 예) DAO 객체의 메서드들을 실행하는데 걸리는 시간을 측정하기
    // 예) 특정 메서드가 실행될 때 로그를 남기기
    // 예) 모든 메서드의 리턴 값을 특정 타입으로 변환하기
    
    System.out.println("X.m1()");
  }
}
